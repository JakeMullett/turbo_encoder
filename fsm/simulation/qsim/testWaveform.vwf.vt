// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/04/2019 20:43:36"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          fsm
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module fsm_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg data_valid;
reg [8:0] length;
reg reset;
// wires                                               
wire clr;
wire [2:0] current_state;
wire enable;
wire trellis_enable;

// assign statements (if any)                          
fsm i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.clr(clr),
	.current_state(current_state),
	.data_valid(data_valid),
	.enable(enable),
	.length(length),
	.reset(reset),
	.trellis_enable(trellis_enable)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// data_valid
initial
begin
	data_valid = 1'b0;
	data_valid = #80000 1'b1;
	data_valid = #140000 1'b0;
	data_valid = #50000 1'b1;
end 

// reset
initial
begin
	reset = 1'b0;
end 
// length[ 8 ]
initial
begin
	length[8] = 1'b0;
end 
// length[ 7 ]
initial
begin
	length[7] = 1'b0;
end 
// length[ 6 ]
initial
begin
	length[6] = 1'b0;
end 
// length[ 5 ]
initial
begin
	length[5] = 1'b0;
end 
// length[ 4 ]
initial
begin
	length[4] = 1'b0;
end 
// length[ 3 ]
initial
begin
	length[3] = 1'b1;
end 
// length[ 2 ]
initial
begin
	length[2] = 1'b0;
end 
// length[ 1 ]
initial
begin
	length[1] = 1'b0;
end 
// length[ 0 ]
initial
begin
	length[0] = 1'b0;
end 
endmodule

