// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/07/2019 11:58:03"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          turbo_encoder
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module turbo_encoder_vlg_vec_tst();
// constants                                           
// general purpose registers
reg ck;
reg ckp;
reg clk;
reg data_valid;
reg length;
reg rst;
// wires                                               
wire [2:0] current_state;
wire length_out;
wire look_now;
wire trl_enable;
wire write_alt_enc;
wire write_alt_trl;
wire xk;
wire xk_enc;
wire xk_trl;
wire zk;
wire zk_enc;
wire zk_trl;
wire zkp;
wire zkp_enc;
wire zkp_trl;

// assign statements (if any)                          
turbo_encoder i1 (
// port map - connection between master ports and signals/registers   
	.ck(ck),
	.ckp(ckp),
	.clk(clk),
	.current_state(current_state),
	.data_valid(data_valid),
	.length(length),
	.length_out(length_out),
	.look_now(look_now),
	.rst(rst),
	.trl_enable(trl_enable),
	.write_alt_enc(write_alt_enc),
	.write_alt_trl(write_alt_trl),
	.xk(xk),
	.xk_enc(xk_enc),
	.xk_trl(xk_trl),
	.zk(zk),
	.zk_enc(zk_enc),
	.zk_trl(zk_trl),
	.zkp(zkp),
	.zkp_enc(zkp_enc),
	.zkp_trl(zkp_trl)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// rst
initial
begin
	rst = 1'b1;
	rst = #30000 1'b0;
end 

// ck
initial
begin
	ck = 1'b0;
	ck = #70000 1'b1;
	ck = #40000 1'b0;
	ck = #20000 1'b1;
	ck = #20000 1'b0;
	ck = #40000 1'b1;
	ck = #40000 1'b0;
	ck = #20000 1'b1;
	ck = #20000 1'b0;
end 

// ckp
initial
begin
	ckp = 1'b0;
	ckp = #90000 1'b1;
	ckp = #40000 1'b0;
	ckp = #20000 1'b1;
	ckp = #40000 1'b0;
	ckp = #20000 1'b1;
	ckp = #20000 1'b0;
end 

// data_valid
initial
begin
	data_valid = 1'b0;
	data_valid = #50000 1'b1;
	data_valid = #20000 1'b0;
	data_valid = #60000 1'b1;
	data_valid = #20000 1'b0;
end 

// length
initial
begin
	length = 1'b0;
	length = #150000 1'b1;
	length = #130000 1'b0;
end 
endmodule

